# A sample Makefile for building both Google Mock and Google Test and
# using them in user tests.  This file is self-contained, so you don't
# need to use the Makefile in Google Test's source tree.  Please tweak
# it to suit your environment and project.  You may want to move it to
# your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
# in your own targets but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file, or if you want to use
# a copy of Google Test at a different location.
GTEST_DIR = gtest

# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file.
#GMOCK_DIR = /c/MinGW/googletest/googletest-release-1.8.0/googlemock

# Where to find user code.
USER_DIR = .
TEST_DIR = $(USER_DIR)/source/tests
CODE_DIR = $(USER_DIR)/source
BUILD_DIR = $(USER_DIR)/build
# Flags passed to the preprocessor.
# Set Google Test and Google Mock's header directories as system
# directories, such that the compiler doesn't generate warnings in
# these headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include `find ./ -type d | sed s/^/-I/` #-Iframework/common -Ibluetooth/host/interface

# Flags passed to the C++ compiler.
CXXFLAGS += -g -pthread -std=c++11


### new stuff ###

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
build/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

build/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

build/gtest.a : build/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

build/gtest_main.a : build/gtest-all.o build/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

#### new stuff ###


CODE = $(BUILD_DIR)/player.o $(BUILD_DIR)/rock_paper_scissor_game.o $(BUILD_DIR)/tournament.o
CODE_SRCS = $(CODE_DIR)/*.cpp $(CODE_DIR)/*.hpp

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = test_player test_tournament test_rock_paper_scissor_game example
TEST_SRCS = $(TEST_DIR)/*.cpp

# House-keeping build targets.

all : $(CODE) $(TESTS)

clean :
	rm build/*

code : $(CODE)

tests : $(TESTS)

example : example

$(BUILD_DIR)/player.o : $(CODE_SRCS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(CODE_DIR)/player.cpp -o $@

$(BUILD_DIR)/test_player.o : $(TEST_SRCS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_player.cpp -o $@

test_player : $(BUILD_DIR)/gtest_main.a $(CODE) $(BUILD_DIR)/test_player.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(BUILD_DIR)/$@

$(BUILD_DIR)/tournament.o : $(CODE_SRCS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(CODE_DIR)/tournament.cpp -o $@

$(BUILD_DIR)/test_tournament.o : $(TEST_SRCS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_tournament.cpp -o $@

test_tournament : $(BUILD_DIR)/gtest_main.a $(CODE) $(BUILD_DIR)/test_tournament.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(BUILD_DIR)/$@

$(BUILD_DIR)/rock_paper_scissor_game.o : $(CODE_SRCS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(CODE_DIR)/rock_paper_scissor_game.cpp -o $@

$(BUILD_DIR)/test_rock_paper_scissor_game.o : $(TEST_SRCS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/test_rock_paper_scissor_game.cpp -o $@

test_rock_paper_scissor_game : $(BUILD_DIR)/gtest_main.a $(CODE) $(BUILD_DIR)/test_rock_paper_scissor_game.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(BUILD_DIR)/$@

$(BUILD_DIR)/example.o : $(CODE_SRCS) $(TEST_SRCS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/example.cpp -o $@

example : $(BUILD_DIR)/example.o $(CODE)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(BUILD_DIR)/$@
